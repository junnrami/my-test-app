__version__ = "1.0.0"
import time
import logging
import sys
from pathlib import Path
from playwright.sync_api import Playwright, sync_playwright
import requests
import subprocess

VERSION_URL = "https://raw.githubusercontent.com/junnrami/my-test-app/main/version.json"


def check_for_updates(current_version):
    try:
        response = requests.get(VERSION_URL)
        version_data = response.json()
        latest = version_data["latest_version"]
        changelog = version_data.get("changelog", "")
        download_url = version_data.get("download_url", "")

        if latest != current_version:
            print(f"üîî –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {latest}")
            print(f"üìã –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:\n{changelog}")
            choice = input("–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è? [y/n]: ").strip().lower()
            if choice == "y":
                try:
                    new_filename = "otpravka_new.exe"
                    print("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é...")

                    r = requests.get(download_url, stream=True)
                    r.raise_for_status()
                    with open(new_filename, "wb") as f:
                        for chunk in r.iter_content(chunk_size=8192):
                            f.write(chunk)

                    print("‚úÖ –°–∫–∞—á–∞–Ω–æ. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª—è—à–∫—É...")

                    current_exe = Path(sys.executable)
                    updater_path = current_exe.parent / "updater.exe"

                    subprocess.Popen([str(updater_path), new_filename, current_exe.name])

                    print("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é...")
                    sys.exit(0)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
                    sys.exit(1)
            else:
                print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏.")
        else:
            print("‚úÖ –£ –≤–∞—Å —Å–∞–º–∞—è —Å–≤–µ–∂–∞—è –≤–µ—Ä—Å–∏—è.")

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    handlers=[
        logging.FileHandler("run.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger()


def get_base_path() -> Path:
    """–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç–æ–º."""
    if getattr(sys, 'frozen', False):
        # –ó–∞–ø—É—Å–∫ –∏–∑ PyInstaller exe
        return Path(sys.executable).parent
    else:
        # –ó–∞–ø—É—Å–∫ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ .py
        return Path(__file__).parent


def find_chromium_path():
    user_home = Path.home()
    base_path = user_home / "AppData" / "Local" / "ms-playwright"
    if not base_path.exists():
        return None
    for item in base_path.iterdir():
        if item.name.startswith("chromium"):
            exe_path = item / "chrome-win" / "chrome.exe"
            if exe_path.exists():
                return str(exe_path)
    return None


def run(playwright: Playwright, url: str, login: str, password: str, codes_file: Path, chromium_path: str) -> None:
    browser = playwright.chromium.launch(executable_path=chromium_path, headless=False)
    context = browser.new_context()
    page = context.new_page()

    logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–µ–Ω–¥: {url}")
    page.goto(url)
    time.sleep(2)

    logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    page.get_by_role("textbox", name="–õ–æ–≥–∏–Ω*").fill(login)
    page.get_by_role("textbox", name="–ü–∞—Ä–æ–ª—å*").fill(password)
    page.get_by_text("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É").click()
    time.sleep(2)

    page.get_by_text("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è").nth(1).click()
    time.sleep(1)
    page.get_by_role("link", name="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ù–°–ò").click()
    time.sleep(2)

    codes = read_codes_from_file(codes_file)

    for code in codes:
        check_catalog_by_code(page, code)
        time.sleep(1)

    page.once("dialog", lambda dialog: dialog.accept())
    page.get_by_role("link", name="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –ù–°–ò –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–∞–º").click()

    max_wait = 60 * 120  # –º–∞–∫—Å–∏–º—É–º 120 –º–∏–Ω—É—Ç
    interval = 240  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 4 –º–∏–Ω—É—Ç—ã
    waited = 0
    while waited < max_wait:
        try:
            page.get_by_text("–ó–∞–∫—Ä—ã—Ç—å", exact=True).wait_for(state="visible", timeout=5000)
            break
        except Exception:
            logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ó–∞–∫—Ä—ã—Ç—å' –µ—â—ë –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å. –ñ–¥–µ–º {interval} —Å–µ–∫—É–Ω–¥...")
            time.sleep(interval)
            waited += interval
    else:
        logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—Ä—ã—Ç—å'. –í–æ–∑–º–æ–∂–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞.")

    page.get_by_text("–ó–∞–∫—Ä—ã—Ç—å", exact=True).click()
    time.sleep(1)

    context.close()
    browser.close()
    logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")


def check_catalog_by_code(page, code: str):
    checkbox = page.locator(
        f"xpath=//tr[td[normalize-space(text())='{code}']]//input[@type='checkbox']"
    )

    if checkbox.count() == 0:
        logger.warning(f"‚ö†Ô∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å –∫–æ–¥–æ–º '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        checkbox.first.check()
        logger.info(f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å –∫–æ–¥–æ–º '{code}' –æ—Ç–º–µ—á–µ–Ω.")


def read_codes_from_file(filepath: Path) -> list[str]:
    with open(filepath, encoding="utf-8") as f:
        codes = [line.strip() for line in f if line.strip()]
    logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(codes)} –∫–æ–¥–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {filepath.name}")
    return codes


def choose_file_interactive(folder: Path, extensions=None, prompt: str = "—Ñ–∞–π–ª") -> Path | None:
    files = [f for f in folder.iterdir() if f.is_file()]
    if extensions is not None:
        extensions = set(e.lower() for e in extensions)
        files = [f for f in files if f.suffix.lower() in extensions]
    if not files:
        logger.error(f"–í –ø–∞–ø–∫–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö {prompt}.")
        return None

    print(f"\n{prompt}:")
    for i, file in enumerate(files, 1):
        print(f"{i}. {file.name}")

    while True:
        choice = input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞: ").strip()
        if choice.isdigit():
            idx = int(choice)
            if 1 <= idx <= len(files):
                return files[idx - 1]
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def read_stands_from_file(filepath: Path) -> list[dict]:
    stands = []
    with open(filepath, encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            parts = [p.strip() for p in line.split(",")]
            if len(parts) != 4:
                logger.warning(f"–°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–æ–∂–∏–¥–∞–ª–æ—Å—å 4 –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(parts)}): {line}")
                continue
            name, url, login, password = parts
            stands.append({"name": name, "url": url, "login": login, "password": password})
    logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(stands)} —Å—Ç–µ–Ω–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {filepath.name}")
    return stands


def main():
    check_for_updates(__version__)
    base_folder = get_base_path()

    codes_file = choose_file_interactive(base_folder, extensions={".txt", ".csv"}, prompt="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
    if codes_file is None:
        logger.error("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–¥–æ–≤. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    stands_file = choose_file_interactive(base_folder, extensions={".txt", ".csv"}, prompt="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤")
    if stands_file is None:
        logger.error("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–µ–Ω–¥–æ–≤. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    stands = read_stands_from_file(stands_file)
    if not stands:
        logger.error("–°–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤ –ø—É—Å—Ç–æ–π. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    chromium_path = find_chromium_path()
    if chromium_path is None:
        print("\n–û—à–∏–±–∫–∞: Chromium-–±—Ä–∞—É–∑–µ—Ä Playwright –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä—ã Playwright, –∑–∞–ø—É—Å—Ç–∏–≤ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:")
        print("  playwright install\n")
        sys.exit(1)

    with sync_playwright() as playwright:
        for stand in stands:
            logger.info(f"\n–ù–∞—á–∞–ª–∞—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–µ–Ω–¥–∞ '{stand['name']}' ({stand['url']})")
            start_time = time.time()

            try:
                run(playwright, stand['url'], stand['login'], stand['password'], codes_file, chromium_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–µ–Ω–¥–æ–º '{stand['name']}' ({stand['url']}): {e}")
                logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—Ç–µ–Ω–¥–æ–º...")
                continue

            elapsed = time.time() - start_time
            logger.info(f"–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–µ–Ω–¥–∞ '{stand['name']}'. –ü–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å {elapsed:.1f} —Å–µ–∫—É–Ω–¥.")


if __name__ == "__main__":
    main()
